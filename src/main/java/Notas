** Descargue Selenium: https://www.selenium.dev/downloads/
** Descargue WeDriverChrome: https://storage.googleapis.com/chrome-for-testing-public/136.0.7103.92/win64/chromedriver-win64.zip
** Puse las dependencias de selenium:
<dependencies>
    <dependency>
        <groupId>org.seleniumhq.selenium</groupId>
        <artifactId>selenium-java</artifactId>
        <version>4.1.0</version> <!-- Usar la última versión disponible -->
    </dependency>
</dependencies>


** Para compilar el proyecto:
mvn compile
mvn exec:java


**Para terminar un proceso iniciado en chrome driver:
taskkill /F /IM chromedriver.exe


**Ruta de chrome driver:
System.setProperty("webdriver.chrome.driver", "C:\\Users\\USUARIO\\Documents\\DatosProgramacion\\AnalisisDeAlgoritmosProyectoFinal\\chromedriver-win64\\chromedriver.exe");


**NOTA**
No tengo instalado java sino jdk, para ello :
1. Abre el buscador de Windows y escribe: variables de entorno.
2. Clic en "Editar las variables de entorno del sistema" → luego "Variables de entorno".
3. "Variables del sistema":
4. Nuevo:
5. Nombre: JAVA_HOME
6. Valor: la ruta a tu JDK (ej. C:\Program Files\Java\jdk-17)
7. Luego edita Path, haz clic en "Nuevo", y añade
%JAVA_HOME%\bin
Acepta todo y reinicia tu terminal (PowerShell o CMD).

**Para que chrome acepte ingresar y no tenga problemas de seguridad:

ChromeOptions options = new ChromeOptions();
        options.addArguments("--start-maximized");

        options.addArguments("--remote-allow-origins=*"); // Importante para conexiones locales
        options.addArguments("--disable-dev-shm-usage");   // Reduce errores de memoria en algunas máquinas
        options.addArguments("--no-sandbox");              // Evita restricciones por seguridad en algunas instalaciones

        WebDriver driver = new ChromeDriver(options);



**Cuando no funciona el click porque no es especificamente un boton:

WebElement ingenieriaDiv = wait.until(ExpectedConditions.presenceOfElementLocated(
    By.xpath("//div[@data-content-listing-item='fac-ingenier-a']")));

JavascriptExecutor js = (JavascriptExecutor) driver;
js.executeScript("arguments[0].click();", ingenieriaDiv);


** Para activar chrome driver : en la terminal
cd C:\Users\USUARIO\Documents\DatosProgramacion\AnalisisDeAlgoritmosProyectoFinal\chromedriver-win64>
**En otra linea**
.\chromedriver.exe



**Instale esto para configurar python: pip install requests browser-cookie3 beautifulsoup4 lxml
**Instale esto para configurar from webdriver_manager.chrome import ChromeDriverManager

: python -m pip install webdriver-manager


**estructuar de resultados.ris o bib:

TY  - JOUR    ← Tipo de referencia (Type)
AU  - Nombre  ← Autor (Author)
TI  - Título  ← Título (Title)
AB  - Resumen ← Abstract (Abstract)
ER           ← Fin del registro (End of Record)


**Para poner la ruta relativa del chrome driver:

BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
CHROMEDRIVER_PATH = os.path.join(BASE_DIR, 'chromedriver-win64', 'chromedriver.exe')

if not os.path.isfile(CHROMEDRIVER_PATH):
    raise FileNotFoundError(f"El archivo chromedriver.exe no se encontró en: {CHROMEDRIVER_PATH}")


**Para las estadisticas:
pip install bibtexparser

**Instalar las dependencias driver

**Instalar paquete pandas

**Instalar paquete matplotlip

Springer funciona super, los otros no reconocen el resumen


**REQUERIMIENTO 3**

¿Qué es analisis_variables_resumenes.py?
Es un módulo Python reutilizable que incluye toda la lógica de análisis de resúmenes, agrupación de variables
por categorías y generación de salidas gráficas/tablas para el requerimiento 3.

**Intalar paquete: wordcloud
**Instalar paquete: networkx

**REQUERIMIENTO 5**

Procesamiento
Aplicar al menos dos técnicas de similitud textual sobre los resúmenes:

Ejemplo recomendado y clásico:
Similitud del coseno con TF-IDF (muy usada y fácil de fundamentar).
Jaccard sobre conjuntos de palabras (otra métrica clásica y contrastada).

Construir una matriz de similitud para cada técnica.

**Instalar paquete: seaborn
**Instalar paquete: scikit-learn

